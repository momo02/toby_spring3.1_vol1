<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
	
	<!-- class 속성에 지정하는 것은 자바메소드에서 오브젝트를 만들 때 사용하는 클래스 이름 -->
	<bean id="userService" class="springbook.user.service.UserService">
		<property name="userDao" ref="userDao"></property>
		<!-- new -->
		<property name="userLevelUpgradePolicy" ref="eventUserLevelUpgradePolicy"></property>
	</bean>
	
	<bean id="userDao" class="springbook.user.dao.UserDaoJdbc">
		<property name="dataSource" ref="dataSource"/> <!-- UserDao 내에 아직 JdbcContext를 적용하지 않은 메소드가 있어서 제거하지 않음. -->
	</bean>

	<bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<!-- driverClass는 String타입이 아니라 java.lang.Class타입. 
		스프링이 프로퍼티 값을, 수정자(set)메소드의 파라미터 타입을 참고로 해서 적절한 형태로 변환해 준다.-->
		<property name="driverClass" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/testdb?characterEncoding=UTF-8"/>
		<property name="username" value="root"/>
		<property name="password" value="1234"/>
	</bean>
	
	<!-- new 사용자 업그레이드 정책을 UserService에서 분리. 분리된 업그레이드 정책을 담은 오브젝트는 DI를 통해 UserService에 주입 
	 예를 들어.. 이벤트 때는 새로운 업그레이드 정책을 사용한다고하면, 새로운 업그레이드 정책을 구현한 클래스를 따로 만들어서 DI해주면 된다.  
	-->
	<bean id="commonUserLevelUpgradePolicy" class="springbook.user.service.CommonUserLevelUpgradePolicy">
		<property name="minLogcountForSilver" value="50"></property>
		<property name="minReccomendForGold" value="30"></property>
	</bean>
	
	<bean id="eventUserLevelUpgradePolicy" class="springbook.user.service.EventUserLevelUpgradePolicy">
		<property name="minLogcountForSilver" value="20"></property>
		<property name="minReccomendForGold" value="10"></property>
	</bean>

</beans>